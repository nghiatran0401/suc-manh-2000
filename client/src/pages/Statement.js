import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  useMediaQuery,
  Box,
  TextField,
  InputAdornment,
  Typography,
  Select,
  MenuItem,
  FormControl,
  Button,
  Link,
  FormHelperText,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  LinearProgress,
  InputLabel,
} from "@mui/material";
import { useTheme } from "@mui/material/styles";
import { useConfirm } from "material-ui-confirm";
import Pagination from "@mui/material/Pagination";
import SearchIcon from "@mui/icons-material/Search";
import { DESKTOP_WIDTH, SERVER_URL } from "../constants";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts";

const SHEETS_TO_CHECK = ["MB2000. 2025 SK T·ªïng"]; // "MB2002. 2025 SK T·ªïng", "VVC. 2025 SK T·ªïng"

export default function Statement() {
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState([]);
  const [capialSum, setCapitalSum] = useState(0);
  const [search, setSearch] = useState("");
  const [month, setMonth] = useState("");
  const [year, setYear] = useState("");
  const [bank, setBank] = useState("");
  const [page, setPage] = useState(1);
  const [summaryData, setSummaryData] = useState([]);
  const [selectedYear, setSelectedYear] = useState("2025");

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const isAdmin = new URLSearchParams(window.location.search).get("admin") === "true";
  const confirm = useConfirm();
  const [isFetchingButtonClicked, setIsFetchingButtonClicked] = useState(false);
  const [selectedOptions, setSelectedOptions] = useState(["MB2000. 2025 SK T·ªïng"]);
  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");
  const [errors, setErrors] = useState({ sheets: false, fromDate: false, toDate: false });
  const [logs, setLogs] = useState([]);

  const rowsPerPage = 20;
  const pageCount = data.length < rowsPerPage ? Math.ceil(data.length / rowsPerPage) : rowsPerPage;

  useEffect(() => {
    (async () => {
      try {
        const response = await axios.get(SERVER_URL + "/tra-cuu-sao-ke", {
          params: {
            search: search,
            month: month,
            year: year,
            bank: bank,
            page: page,
            limit: rowsPerPage,
          },
        });
        setData(response.data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    })();
  }, [search, month, year, bank, page]);

  useEffect(() => {
    (async () => {
      try {
        const res = await axios.get(SERVER_URL + "/tra-cuu-sao-ke/summary", {
          params: {
            year: selectedYear,
          },
        });
        setSummaryData(transformSummaryData(res.data.summary));
        setCapitalSum(res.data.total);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    })();
  }, [selectedYear]);

  const transformSummaryData = (raw) => {
    const map = {};
    raw.forEach(({ month, bank, capital_sum }) => {
      if (!map[month]) {
        map[month] = { month: parseInt(month, 10) };
      }
      map[month][bank] = Number(capital_sum) || 0;
    });
    return Object.values(map).sort((a, b) => a.month - b.month);
  };

  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      return (
        <Paper sx={{ p: 1 }}>
          <Typography>Th√°ng: {label}</Typography>
          {payload.map((item, i) => (
            <Typography key={i}>
              {item.name}: {Number(item.value).toLocaleString()} VNƒê
            </Typography>
          ))}
        </Paper>
      );
    }
    return null;
  };

  const handleSyncData = async () => {
    let hasErrors = false;
    let newErrors = { sheets: false, fromDate: false, toDate: false };

    if (selectedOptions.length === 0) {
      newErrors.sheets = true;
      hasErrors = true;
    }
    if (!fromDate) {
      newErrors.fromDate = true;
      hasErrors = true;
    }
    if (!toDate) {
      newErrors.toDate = true;
      hasErrors = true;
    }

    setErrors(newErrors);
    if (hasErrors) return;

    const { confirmed } = await confirm({
      title: "B·∫°n c√≥ ch·∫Øc mu·ªën ti·∫øp t·ª•c kh√¥ng?",
      description: (
        <p>
          Sync data c√≥ th·ªÉ s·∫Ω m·∫•t m·ªôt kho·∫£ng th·ªùi gian, t√πy v√†o c·∫ßn update bao nhi√™u rows t·ª´ Google Sheets sang. M·ªôt khi ch·∫°y r·ªìi s·∫Ω kh√¥ng d·ª´ng ƒë∆∞·ª£c, h√£y suy nghƒ© kƒ© tr∆∞·ªõc khi nh·∫•n n√∫t!!!
          <br />
          <br />
          Sync data {selectedOptions.length} sheet{selectedOptions.length > 1 && "s"} <strong>"{selectedOptions.join(", ")}"</strong> t·ª´ ng√†y <strong>{fromDate}</strong> ƒë·∫øn ng√†y <strong>{toDate}</strong>.
        </p>
      ),
      confirmationButtonProps: { autoFocus: true },
    });

    if (confirmed) {
      setIsFetchingButtonClicked(true);
      const response = await axios.post(SERVER_URL + "/tra-cuu-sao-ke/fetchTransactionDataFromGsheet", { selectedOptions, fromDate, toDate });
      setLogs(response.data.logs);
      setIsFetchingButtonClicked(false);
    }
  };

  return (
    <Box maxWidth={DESKTOP_WIDTH} width={"100%"} m={"0 auto"} my={"24px"} display="flex" flexDirection={"column"} gap={"16px"} p={2}>
      <Typography variant="h5" fontWeight={"bold"} textAlign="center">
        SAO K√ä T√ÄI KHO·∫¢N S·ª®C M·∫†NH 2000
      </Typography>

      {loading && (
        <Box minHeight={"500px"} mt={"200px"}>
          <LinearProgress />
        </Box>
      )}

      {/* Sync data from Google Sheets */}
      {isAdmin && (
        <Box>
          <Typography variant="h5" fontWeight={"bold"}>
            Sync data from Google Sheets
          </Typography>

          <Dialog open={logs.length > 0} onClose={() => setLogs([])} maxWidth="md" fullWidth>
            <DialogTitle>Results</DialogTitle>
            <DialogContent dividers sx={{ maxHeight: 400, overflowY: "auto" }}>
              {logs.length === 0 ? (
                <Typography>No logs available.</Typography>
              ) : (
                logs.map((log, index) => (
                  <Box
                    key={index}
                    sx={{
                      padding: "8px",
                      backgroundColor: log.error ? "#ffebee" : "#e8f5e9",
                      color: log.error ? "#d32f2f" : "#2e7d32",
                      borderRadius: "4px",
                      marginBottom: "6px",
                    }}
                  >
                    {log.message || log.error}
                  </Box>
                ))
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setLogs([])} color="primary">
                Close
              </Button>
            </DialogActions>
          </Dialog>

          <Box display="flex" gap={2} alignItems="center" my={2}>
            <FormControl sx={{ minWidth: 250, flex: 1 }} error={errors.sheets}>
              <Select multiple value={selectedOptions} onChange={(e) => setSelectedOptions(e.target.value)} renderValue={(selected) => (selected.length ? selected.join(", ") : "Select sheets")} displayEmpty>
                {SHEETS_TO_CHECK.map((option) => (
                  <MenuItem key={option} value={option}>
                    {option}
                  </MenuItem>
                ))}
              </Select>
              {errors.sheets && <FormHelperText>Please select at least one sheet</FormHelperText>}
            </FormControl>

            <TextField
              label="From Date"
              type="date"
              InputLabelProps={{ shrink: true }}
              value={fromDate}
              onChange={(e) => setFromDate(e.target.value)}
              sx={{ minWidth: 180 }}
              error={errors.fromDate}
              helperText={errors.fromDate ? "Please select a from date" : ""}
            />
            <TextField
              label="To Date"
              type="date"
              InputLabelProps={{ shrink: true }}
              value={toDate}
              onChange={(e) => setToDate(e.target.value)}
              sx={{ minWidth: 180 }}
              error={errors.toDate}
              helperText={errors.toDate ? "Please select a to date" : ""}
            />

            <Button variant="contained" onClick={handleSyncData} disabled={isFetchingButtonClicked}>
              {isFetchingButtonClicked ? "Loading..." : "Sync data"}
            </Button>
          </Box>
        </Box>
      )}

      {/* Chart */}
      {isAdmin && (
        <Box>
          <Typography variant="h6" gutterBottom fontWeight="bold" mb={2}>
            üìä Th·ªëng k√™ theo th√°ng
          </Typography>

          <Box display="flex" gap={2} mb={3}>
            <FormControl>
              <InputLabel>NƒÉm</InputLabel>
              <Select value={selectedYear} label="NƒÉm" onChange={(e) => setSelectedYear(e.target.value)} sx={{ height: 40 }}>
                {["2025", "2024", "2023"].map((year) => (
                  <MenuItem key={year} value={year}>
                    {year}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>

          <Box display="flex" gap={4} mb={2} flexWrap="wrap">
            {["MB2000", "MB", "TECHCOMBANK"].map((bank) => {
              const total = summaryData.reduce((sum, row) => sum + (row[bank] || 0), 0);
              const colorMap = {
                MB: "#4caf50",
                MB2000: "#ff9800",
                TECHCOMBANK: "#2196f3",
              };

              return (
                <Typography key={bank} variant="body1" sx={{ color: colorMap[bank], fontWeight: "bold" }}>
                  {bank}: {total.toLocaleString()} VNƒê
                </Typography>
              );
            })}
          </Box>

          <Paper sx={{ p: 2 }}>
            <ResponsiveContainer width="100%" height={500}>
              <BarChart data={summaryData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }} barCategoryGap="20%" barGap={8}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" tickFormatter={(m) => `Th√°ng ${m}`} />
                <YAxis tickFormatter={(v) => `${(v / 1_000_000_000).toFixed(0)} t·ª∑`} />
                <Tooltip content={<CustomTooltip />} />
                <Legend />
                <Bar dataKey="MB" fill="#4caf50" name="MB" />
                <Bar dataKey="MB2000" fill="#ff9800" name="MB2000" />
                <Bar dataKey="TECHCOMBANK" fill="#2196f3" name="TECHCOMBANK" />
              </BarChart>
            </ResponsiveContainer>
          </Paper>
        </Box>
      )}

      {/* Announcement + Report */}
      <Box display="flex" flexDirection={isMobile ? "column-reverse" : "row"} justifyContent="space-between" width="100%">
        {/* Announcement Section */}
        <Box p={2} border={1} borderColor="#FFF2F0" borderRadius={1} bgcolor="#FFF2F0" sx={{ display: "flex", flexDirection: "column", flex: 3, margin: 1, padding: 2, gap: 0.75 }}>
          <Typography variant="h6" fontWeight="bold" gutterBottom color="#F5232D" textAlign="center">
            TH√îNG B√ÅO
          </Typography>
          <Typography variant="body2">- Kh√¥ng tr√≠ch b·∫•t k·ª≥ chi ph√≠ qu·∫£n l√Ω n√†o. 100% s·ªë ti·ªÅn c·ªông ƒë·ªìng ·ªßng h·ªô t·ªõi tay ƒë·ªëi t∆∞·ª£ng v√† ƒë√∫ng m·ª•c ƒë√≠ch.</Typography>
          <Typography variant="body2">- C·∫≠p nh·∫≠t sao k√™ 1 l·∫ßn/tu·∫ßn.</Typography>
          <Typography variant="body2">- T·∫•t c·∫£ c√°c chuy·ªÉn kho·∫£n (CK) nh·∫ßm v√†o t√†i kho·∫£n d·ª± √°n, ch√∫ng t√¥i xin ph√©p ƒë∆∞a v√†o n·ªôi dung x√¢y Tr∆∞·ªùng/Nh√†/C·∫ßu.</Typography>
          <Typography variant="body2">- T√¨m ki·∫øm theo n·ªôi dung CK c·ªßa b·∫°n.</Typography>
          <Typography variant="body2">
            - CK s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v√†o x√¢y d·ª±ng c√¥ng tr√¨nh (CT) d·ª±a theo n·ªôi dung CK c·ªßa b·∫°n.
            <ul>
              <li>Trong tr∆∞·ªùng h·ª£p CK c·ªßa b·∫°n ƒë∆∞·ª£c ƒë∆∞a v√†o x√¢y CT kh√°c v·ªõi n·ªôi dung CK c·ªßa b·∫°n th√¨ l√† do CT ƒë√≥ ƒë√£ ƒë·ªß ti·ªÅn, d·ª± √°n s·∫Ω ƒë∆∞a sang CT kh√°c c≈©ng ƒëang k√™u g·ªçi t·∫°i c√πng th·ªùi ƒëi·ªÉm.</li>
              <li>ƒê·ªëi v·ªõi c√°c CK kh√¥ng c√≥ n·ªôi dung c·ª• th·ªÉ, d·ª± √°n s·∫Ω ch·ªß ƒë·ªông ƒë∆∞a v√†o c√°c CT d·ª±a tr√™n m·ª©c ƒë·ªô c·∫•p thi·∫øt.</li>
            </ul>
          </Typography>
          <Typography variant="body2">
            - Li√™n h·ªá v·ªõi d·ª± √°n khi c√≥ v∆∞·ªõng m·∫Øc v·ªÅ sao k√™: Inbox fanpage
            <Link href="https://facebook.com/sucmanh2000" target="_blank" rel="noopener" sx={{ marginLeft: 0.5 }}>
              S·ª©c m·∫°nh 2000
            </Link>
          </Typography>
        </Box>

        {/* Report Section */}
        <Box
          my={2}
          p={2}
          border={1}
          borderColor="#FFF2F0"
          borderRadius={1}
          bgcolor="#FFF2F0"
          sx={{
            flex: 2,
            margin: 1,
            padding: 2,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          <Typography variant="h6" textAlign="center">
            B√ÅO C√ÅO T·ªîNG TI·ªÄN
          </Typography>
          <Typography variant="h4" fontWeight="bold" textAlign="center" sx={{ color: "#F5232D" }}>
            {capialSum.toLocaleString()} VNƒê
          </Typography>
        </Box>
      </Box>

      {/* Filters */}
      <Box display="flex" flexDirection={isMobile ? "column" : "row"} gap={2} alignItems={isMobile ? "stretch" : "center"} justifyContent="space-between" width="100%" sx={{ mt: 4, mb: 4 }}>
        {/* Search */}
        <Box sx={{ width: isMobile ? "100%" : "auto", flex: isMobile ? undefined : 2 }}>
          <TextField
            value={search}
            placeholder="T√¨m ki·∫øm theo t√™n, m√£ GD, c√¥ng tr√¨nh"
            onChange={(e) => setSearch(e.target.value)}
            variant="outlined"
            fullWidth
            size="medium"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon color="disabled" />
                </InputAdornment>
              ),
            }}
            sx={{
              background: "#FFFFFF",
              borderRadius: "12px",
              "& .MuiOutlinedInput-root": {
                height: "40px",
              },
            }}
          />
        </Box>

        {/* Dropdowns */}
        <Box display="flex" flexDirection="row" flexWrap="wrap" justifyContent={isMobile ? "flex-start" : "space-between"} gap={2}>
          <FormControl sx={{ minWidth: 100, width: "fit-content" }}>
            <Select
              value={month}
              onChange={(e) => setMonth(e.target.value)}
              displayEmpty
              sx={{
                height: "40px",
                background: "#FFFFFF",
                borderRadius: "4px",
                ".MuiOutlinedInput-notchedOutline": {
                  borderColor: "#D9D9D9",
                },
              }}
            >
              <MenuItem value="">Th√°ng (T·∫•t c·∫£)</MenuItem>
              {Array.from({ length: 12 }, (_, i) => (
                <MenuItem key={i + 1} value={i + 1}>
                  Th√°ng {String(i + 1).padStart(2, "0")}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 100, width: "fit-content" }}>
            <Select
              value={year}
              onChange={(e) => setYear(e.target.value)}
              displayEmpty
              sx={{
                height: "40px",
                background: "#FFFFFF",
                borderRadius: "4px",
                ".MuiOutlinedInput-notchedOutline": {
                  borderColor: "#D9D9D9",
                },
              }}
            >
              <MenuItem value="">NƒÉm (T·∫•t c·∫£)</MenuItem>
              {["2025", "2024", "2023"].map((y) => (
                <MenuItem key={y} value={y}>
                  NƒÉm {y}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 100, width: "fit-content" }}>
            <Select
              value={bank}
              onChange={(e) => setBank(e.target.value)}
              displayEmpty
              sx={{
                height: "40px",
                background: "#FFFFFF",
                borderRadius: "4px",
                ".MuiOutlinedInput-notchedOutline": {
                  borderColor: "#D9D9D9",
                },
              }}
            >
              <MenuItem key={0} value={""}>
                Ng√¢n h√†ng
              </MenuItem>
              {["MB2000", "MB", "TECHCOMBANK"].map((_) => (
                <MenuItem key={_} value={_}>
                  {_}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Box>
      </Box>

      {/* Statement table */}
      <Box display="flex" flexDirection="column" gap="8px">
        <Typography variant="body2" color="red">
          *N·∫øu b·∫°n xem tr√™n ƒëi·ªán tho·∫°i, h√£y l∆∞·ªõt sang ph·∫£i ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß th√¥ng tin
        </Typography>
        <TableContainer component={Paper}>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontWeight: "bold", width: "10%" }}>Ng√†y</TableCell>
                <TableCell sx={{ fontWeight: "bold", width: "10%" }}>M√£ giao d·ªãch</TableCell>
                <TableCell sx={{ fontWeight: "bold", width: "10%" }}>S·ªë ti·ªÅn</TableCell>
                <TableCell sx={{ fontWeight: "bold", width: "35%" }}>N·ªôi dung</TableCell>
                <TableCell sx={{ fontWeight: "bold", width: "10%" }}>C√¥ng tr√¨nh ph√¢n b·ªï</TableCell>
                <TableCell sx={{ fontWeight: "bold", width: "10%" }}>Link web c√¥ng tr√¨nh</TableCell>
                <TableCell sx={{ fontWeight: "bold", width: "10%" }}>Ng√¢n h√†ng</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {data.map((s, i) => (
                <TableRow key={i} hover>
                  <TableCell>{s.date}</TableCell>
                  <TableCell>{s.transaction_code}</TableCell>
                  <TableCell>{s.amount}</TableCell>
                  <TableCell>{s.description}</TableCell>
                  <TableCell>{s.project_name}</TableCell>
                  <TableCell>
                    <a href={s.project_url} target="__blank">
                      <Typography variant="body2">{s.project_id}</Typography>
                    </a>
                  </TableCell>
                  <TableCell>{s.bank}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Box>

      {/* Pagination */}
      <Box display="flex" justifyContent="center">
        <Pagination count={pageCount} page={page} onChange={(event, newPage) => setPage(newPage)} shape="rounded" />
      </Box>
    </Box>
  );
}
